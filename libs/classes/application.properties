# ======================================
# Application
# ======================================
spring.application.name=binance-data-provider
spring.banner.location=classpath:/com/iracanyes/fintech/jeny/binance/data/provider/banner-binance-data-provider.txt
# ======================================
# Vault
# ======================================
# configure the Vault endpoint with an URI. Takes precedence over host/port/scheme configuration
spring.cloud.vault.uri=https://localhost:8200
# setting the scheme to http will use plain HTTP. Supported schemes are http and https
spring.cloud.vault.scheme=https
# sets the hostname of the Vault host. The host name will be used for SSL certificate validation
spring.cloud.vault.host=localhost
# sets the Vault port
spring.cloud.vault.port=8200
# setting this value to TOKEN selects the Token authentication method
spring.cloud.vault.authentication=TOKEN
# sets the static token to use. If missing or empty, then an attempt will be made to retrieve a token from ~/.vault-token
spring.cloud.vault.token=${VAULT_TOKEN}
# Unknown property
#spring.cloud.vault.tls.enabled=true
spring.cloud.vault.kv.enabled=true
# sets the connection timeout in milliseconds
spring.cloud.vault.connection-timeout=5000
# sets the read timeout in milliseconds
spring.cloud.vault.read-timeout=15000
# Configure SSL only for Spring Cloud Vault Config
# Please note that configuring spring.cloud.vault.ssl.* can be only applied when either Apache Http Components or the OkHttp client is on your class-path.
#spring.cloud.vault.ssl.key-store=${JENY_BNC_DATA_TRUST_STORE_LOCATION}
#spring.cloud.vault.ssl.key-store-password=${JENY_BNC_DATA_KEY_STORE_PASSWORD}
#spring.cloud.vault.ssl.key-store-type=${JENY_BNC_DATA_KEY_STORE_TYPE}
#spring.cloud.vault.ssl.trust-store=${JAVA_HOME}/lib/security/cacerts
#spring.cloud.vault.ssl.trust-store-password=${JAVA_TRUST_STORE_PASSWORD}
# Since Java 9 , PKCS12 is the default format
#spring.cloud.vault.ssl.trust-store-type=JKS
#spring.cloud.vault.ssl.enabled-protocols=TLSv1.2,TLSv1.3
#spring.cloud.vault.ssl.enabled-cipher-suites=TLS_AES_128_GCM_SHA256

# mounts Vault as PropertySource using all enabled secret backends (key-value enabled by default
# WARNING : Consider carefully your security requirements.
# Static token authentication is fine if you want quickly get started with Vault,
# but a static token is not protected any further.
# Any disclosure to unintended parties allows Vault use with the associated token roles
# optionnal .env file + vault secrets loaded as properties (only if spring-cloud-starter-vault-config added as dependency
#spring.config.import=optional:file:.env:,vault://
spring.config.import=optional:file:.env
# ======================================
# Mongo
# ======================================
spring.data.mongodb.uri=${JENY_BNC_DATA_MONGO_URI}
spring.data.mongodb.database=${JENY_BNC_DATA_MONGO_DATABASE}
spring.data.mongodb.additional-hosts[0]=${JENY_BNC_DATA_MONGO_REPLICA1_HOST}
spring.data.mongodb.additional-hosts[1]=${JENY_BNC_DATA_MONGO_REPLICA2_HOST}
spring.data.mongodb.ssl.enabled=true
# ======================================
# Server
# ======================================
# Server address
server.address=172.22.5.200
# Server port
server.port=8444
# Configure to only HTTPS requests!
server.ssl.enabled=true
# The format used for the keystore. It could be set to JKS in case it is a JKS file
server.ssl.key-store-type=pkcs12
# The path to the keystore containing the certificate
server.ssl.key-store=${JENY_BNC_DATA_KEY_STORE_PATH}
# The password used to generate the certificate
server.ssl.key-store-password=${JENY_BNC_DATA_KEY_STORE_PASSWORD}
# The alias mapped to the certificate
server.ssl.key-alias=binance-data-provider